{"ast":null,"code":"var _jsxFileName = \"/home/amanda/Documentos/PTG/curso/learningReact/my-app/frontend/src/components/ToDoComps/ListItem.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext } from 'react';\nimport { Button, Row, Col, Form } from 'react-bootstrap';\nimport './ToDo.css';\nimport { FaTrash, FaPen } from 'react-icons/fa';\nimport { toast } from 'react-toastify';\nimport ModalComponent from '../Modal';\nimport axios from '../../utils/api';\nimport { TaskContext } from '../../pages/ToDo/TaskContextProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ListItem({\n  item\n}) {\n  _s();\n\n  const [tasks, setTasks] = useContext(TaskContext); // State to allow changing the item visual\n\n  const [task, changeTask] = useState({\n    name: item.name,\n    isDone: item.isDone,\n    id: item.id\n  }); // State to allow changing modal visibility\n\n  const [showModal, setShowModal] = useState(false); // State to allow changing the modal input value\n\n  const [newTaskName, setNewTaskName] = useState('');\n\n  const updateNewTaskName = ({\n    target: {\n      value\n    }\n  }) => {\n    // Update task in edition name to be the modal input value\n    setNewTaskName(value);\n  };\n\n  const onSubmit = async () => {\n    try {\n      await axios.put(`/tasks/${task.id}`, { ...task,\n        name: newTaskName\n      }); // Update tasks list with this task renamed when changes are saved in modal\n\n      setTasks(tasks.map(listItem => {\n        if (listItem.id === task.id) {\n          const newObj = { ...listItem,\n            name: newTaskName\n          };\n          return newObj;\n        }\n\n        return listItem;\n      })); // Update this item state\n\n      changeTask({ ...task,\n        name: newTaskName\n      });\n      setShowModal(!showModal);\n      toast('Saved changes');\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const onEdit = () => {\n    // Edit task name in modal\n    setNewTaskName(task.name);\n    setShowModal(!showModal);\n  };\n\n  const onClose = () => {\n    // Close modal\n    setShowModal(!showModal);\n  };\n\n  const onRemove = async () => {\n    // Remove this item from task lists\n    try {\n      await axios.delete(`/tasks/${task.id}`);\n      setTasks(tasks.filter(listItem => listItem.id !== task.id));\n      toast('Removed task');\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const onCheck = async () => {\n    // Update tasks from ToDo page when it is marked as done/undone\n    try {\n      await axios.put(`/tasks/${task.id}`, { ...task,\n        isDone: !task.isDone\n      });\n      setTasks(tasks.map(listItem => {\n        if (listItem.id === item.id) {\n          return { ...listItem,\n            isDone: !listItem.isDone\n          };\n        }\n\n        return listItem;\n      })); // Update this item state\n\n      changeTask({ ...task,\n        isDone: !task.isDone\n      });\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: task.isDone ? 'todoItemDone' : 'todoItemUndone',\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          className: \"todoCols\",\n          sm: \"1\",\n          md: \"1\",\n          xl: \"1\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            checked: task.isDone,\n            type: \"checkbox\",\n            onChange: onCheck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"todoCols\",\n          sm: \"7\",\n          md: \"7\",\n          xl: \"7\",\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"todoCols\",\n          sm: \"4\",\n          md: \"4\",\n          xl: \"4\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"dark\",\n            onClick: onEdit,\n            children: [/*#__PURE__*/_jsxDEV(FaPen, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this), ' Edit']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"danger\",\n            className: \"ml-3\",\n            onClick: onRemove,\n            children: [/*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this), ' Remove']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalComponent, {\n      show: showModal,\n      toggle: onClose,\n      title: task.name,\n      onSubmit: onSubmit,\n      children: /*#__PURE__*/_jsxDEV(Form.Control, {\n        maxLength: \"80\",\n        value: newTaskName,\n        onChange: updateNewTaskName,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ListItem, \"I5QUpk2YzvibLYb8hFcPgCV2m/Q=\");\n\n_c = ListItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListItem\");","map":{"version":3,"sources":["/home/amanda/Documentos/PTG/curso/learningReact/my-app/frontend/src/components/ToDoComps/ListItem.jsx"],"names":["React","useState","useContext","Button","Row","Col","Form","FaTrash","FaPen","toast","ModalComponent","axios","TaskContext","ListItem","item","tasks","setTasks","task","changeTask","name","isDone","id","showModal","setShowModal","newTaskName","setNewTaskName","updateNewTaskName","target","value","onSubmit","put","map","listItem","newObj","error","message","onEdit","onClose","onRemove","delete","filter","onCheck"],"mappings":"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","sourcesContent":["import { React, useState, useContext } from 'react';\nimport {\n  Button, Row, Col, Form,\n} from 'react-bootstrap';\nimport './ToDo.css';\nimport { FaTrash, FaPen } from 'react-icons/fa';\nimport { toast } from 'react-toastify';\nimport ModalComponent from '../Modal';\nimport axios from '../../utils/api';\nimport { TaskContext } from '../../pages/ToDo/TaskContextProvider';\n\nexport default function ListItem({ item }) {\n  const [tasks, setTasks] = useContext(TaskContext);\n  // State to allow changing the item visual\n  const [task, changeTask] = useState({\n    name: item.name,\n    isDone: item.isDone,\n    id: item.id,\n  });\n  // State to allow changing modal visibility\n  const [showModal, setShowModal] = useState(false);\n  // State to allow changing the modal input value\n  const [newTaskName, setNewTaskName] = useState('');\n\n  const updateNewTaskName = ({ target: { value } }) => {\n    // Update task in edition name to be the modal input value\n    setNewTaskName(value);\n  };\n\n  const onSubmit = async () => {\n    try {\n      await axios.put(`/tasks/${task.id}`, {\n        ...task,\n        name: newTaskName,\n      });\n\n      // Update tasks list with this task renamed when changes are saved in modal\n      setTasks(tasks.map((listItem) => {\n        if (listItem.id === task.id) {\n          const newObj = {\n            ...listItem,\n            name: newTaskName,\n          };\n          return newObj;\n        }\n        return listItem;\n      }));\n\n      // Update this item state\n      changeTask({\n        ...task,\n        name: newTaskName,\n      });\n      setShowModal(!showModal);\n      toast('Saved changes');\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const onEdit = () => {\n    // Edit task name in modal\n    setNewTaskName(task.name);\n    setShowModal(!showModal);\n  };\n\n  const onClose = () => {\n    // Close modal\n    setShowModal(!showModal);\n  };\n\n  const onRemove = async () => {\n    // Remove this item from task lists\n    try {\n      await axios.delete(`/tasks/${task.id}`);\n\n      setTasks(\n        tasks.filter((listItem) => (listItem.id !== task.id)),\n      );\n      toast('Removed task');\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const onCheck = async () => {\n    // Update tasks from ToDo page when it is marked as done/undone\n    try {\n      await axios.put(`/tasks/${task.id}`, {\n        ...task,\n        isDone: !task.isDone,\n      });\n\n      setTasks(tasks.map((listItem) => {\n        if (listItem.id === item.id) {\n          return { ...listItem, isDone: !listItem.isDone };\n        }\n        return listItem;\n      }));\n\n      // Update this item state\n      changeTask({\n        ...task,\n        isDone: !task.isDone,\n      });\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  return (\n    <>\n      <div className={task.isDone ? 'todoItemDone' : 'todoItemUndone'}>\n        <Row>\n          <Col className=\"todoCols\" sm=\"1\" md=\"1\" xl=\"1\">\n            <input checked={task.isDone} type=\"checkbox\" onChange={onCheck} />\n          </Col>\n          <Col className=\"todoCols\" sm=\"7\" md=\"7\" xl=\"7\">{task.name}</Col>\n          <Col className=\"todoCols\" sm=\"4\" md=\"4\" xl=\"4\">\n            <Button variant=\"dark\" onClick={onEdit}>\n              <FaPen />\n              {' Edit'}\n            </Button>\n            <Button variant=\"danger\" className=\"ml-3\" onClick={onRemove}>\n              <FaTrash />\n              {' Remove'}\n            </Button>\n          </Col>\n        </Row>\n      </div>\n\n      <ModalComponent show={showModal} toggle={onClose} title={task.name} onSubmit={onSubmit}>\n        <Form.Control maxLength=\"80\" value={newTaskName} onChange={updateNewTaskName} type=\"text\" />\n      </ModalComponent>\n    </>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}